CREATE OR REPLACE PROCEDURE "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA".AUTOHUB_TRANSACTIONAL_REPORT_LOAD(DATABASE_NAME VARCHAR,TENANT_ID VARCHAR,SRC_PATH VARCHAR)
  RETURNS VARCHAR
  LANGUAGE javascript
  EXECUTE AS OWNER
AS
--LOADING DATA FROM FILE TO TRANSACTIONS_FACT_DETAILS TABLE
$$
try
{
	var DB_NAME = DATABASE_NAME;
	var SF_NAME = SRC_PATH;
	var SCHEMA_NAME = "";
    var Err_Msg ="";
	var UPDATED_BY ='AUTOHUB_TRANSACTIONAL_REPORT_LOAD';
    

	snowflake.execute({ sqlText:`INSERT INTO "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_CONTROL_TABLE"(Stored_Procedure_Name,STATUS,Start_time,table_name,FILE_NAME)
	VALUES('`+UPDATED_BY+`', 'In-progress',  current_timestamp(),'CL_LOAD_TEMPORARY','`+SF_NAME+`')`}); 
	
		

  try{
		//Getting Tenant Name from TENANT_DETAILS Table

		var my_sql_command = snowflake.execute({sqlText: `SELECT upper(TENANT_NAME_TEXT) AS TENANT_NAME FROM ELEMENT5_DB.ELEMENT5_DB_SCHEMA.TENANT_DETAILS where TENANT_ID ='`+TENANT_ID+`';`});
        
        
		
		if (my_sql_command.next() == false)
        {
            
            
            Err_Msg ="Err_120: Tenant Name Not Found in Tenant Details";
            
			snowflake.execute( { sqlText:`UPDATE "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_CONTROL_TABLE" set status='Failed',
			end_time = current_timestamp(),TENANT_NAME = 'Not Found'
			where FILE_NAME='`+SF_NAME+`' and end_time is null`});  
			
       
            
			snowflake.execute({ sqlText: `insert into "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_ERROR_TABLE"(ERROR_CODE,ERROR_STATE,
            ERROR_MESSAGE,ERROR_LINE,Stored_Procedure_Name,TENANT_NAME,FILE_NAME,CUSTOM_ERR_CODE,DB_NAME,CUSTOM_ERR_MESSAGE) 
            VALUES (?,?,?,?,?,?,?,?,?,?)`,binds: ['Err_120', '200', Err_Msg, '',
            UPDATED_BY,SCHEMA_NAME,SF_NAME,'Err_120',DB_NAME,Err_Msg]});
			
            
			snowflake.execute({ sqlText:`select ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTO_HUB_2_0_ALERT_EXTERNAL_FUNCTION (object_construct(*)) FROM ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM;`});
	
			snowflake.execute({ sqlText:`Insert into ELEMENT5_DB.ELEMENT5_DB_SCHEMA.JUNK_STREAM_TABLE select $1 from ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM where false; `});
        
			return Err_Msg;
        
        }
        else {
        
            SCHEMA_NAME = my_sql_command.getColumnValue(1);
            
        }
		
	}
  catch(err)
	{
        
		snowflake.execute ({sqlText: `ROLLBACK`});
        Err_Msg =`Err_10 : Failed to Get Tenant Name`;
		
		//Inserting Error Table
		
		snowflake.execute( { sqlText:`UPDATE "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_CONTROL_TABLE" set status='Failed',
		end_time = current_timestamp(),TENANT_NAME = '`+SCHEMA_NAME+`'
        where FILE_NAME='`+SF_NAME+`' and end_time is null`});
		
		snowflake.execute({ sqlText: `insert into "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_ERROR_TABLE"(ERROR_CODE,ERROR_STATE,
        ERROR_MESSAGE,ERROR_LINE,Stored_Procedure_Name,TENANT_NAME,FILE_NAME,CUSTOM_ERR_CODE,DB_NAME,CUSTOM_ERR_MESSAGE) 
        VALUES (?,?,?,?,?,?,?,?,?,?)`,binds: [err.code, err.state, err.message, err.stackTraceTxt,
        UPDATED_BY,SCHEMA_NAME,SF_NAME,'Err_10',DB_NAME,Err_Msg]});
		
		snowflake.execute({ sqlText:`select ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTO_HUB_2_0_ALERT_EXTERNAL_FUNCTION (object_construct(*)) 
		FROM ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM;`});
  
        snowflake.execute({ sqlText:`Insert into ELEMENT5_DB.ELEMENT5_DB_SCHEMA.JUNK_STREAM_TABLE select $1 from ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM where false; `});
        
        return Err_Msg;
	}
    
    
 
  try{
   
		//Creating Table STRUCTURE if table 

		var sch= "CREATE SCHEMA IF NOT EXISTS "+ DB_NAME+"."+ SCHEMA_NAME +";";
		var sch_command = snowflake.createStatement({sqlText:sch});
		var sch_creation = sch_command.execute();

		var table1 = "CREATE TABLE IF NOT EXISTS "+ DB_NAME+"."+ SCHEMA_NAME +".AUTOHUB_JSON_RAW_LAYER (AUTOHUB_JSON_DATA_RAW VARIANT);";  
		var table1_command = snowflake.createStatement({sqlText:table1});
		var table1_creation = table1_command.execute();

		var stream1 = "CREATE STREAM IF NOT EXISTS "+ DB_NAME+"."+ SCHEMA_NAME +".AUTOHUB_JSON_RAW_LAYER_STREAM ON TABLE "+ DB_NAME+"."+ SCHEMA_NAME +".AUTOHUB_JSON_RAW_LAYER;";
		var stream1_creation = snowflake.createStatement({sqlText:stream1}).execute();

		var table2 = "CREATE OR REPLACE TEMPORARY TABLE "+ DB_NAME+"."+ SCHEMA_NAME +".CL_LOAD_TEMPORARY(CL_LOAD_ID NUMERIC identity(1,1),ACTIVITY_ID VARCHAR,TENANTID VARCHAR(255),PREBUILTWORKFLOWID VARCHAR,PROCESS_ID VARCHAR(255),PROCESS_RUN_ID VARCHAR(255),UIPATH_STARTED_AT VARCHAR,UIPATH_COMPLETED_AT VARCHAR,UIPATH_BOT VARCHAR(255),MW_STARTED_AT VARCHAR,MW_COMPLETED_AT VARCHAR,MW_NAME VARCHAR(255),TRANSACTION_STATUS_ID VARCHAR(255),STAGE_ID VARCHAR(255),TRANSACTION_STATUS VARCHAR(255),TRANSACTION_ID VARCHAR(255),STAGE_NAME VARCHAR(255),STAGE_ORDER NUMBER,STAGE_STATUS VARCHAR(100),FB_ID VARCHAR(255),FUNCTIONAL_BLOCK VARCHAR(255),START_DATE_TIME VARCHAR,END_DATE_TIME VARCHAR,TRANSACTIONSTART VARCHAR,TRANSACTIONEND VARCHAR,TRANSACTIONPRIORITYFLAG CHAR(2),ATTRIBUTES_INPUT_JSON VARIANT,ATTRIBUTES_OUTPUT_JSON VARIANT,IS_FINAL_EVENT BOOLEAN,TRANS_LATEST_FLAG CHAR(2),UPDATED_AT TIMESTAMP_TZ,UPDATED_BY VARCHAR,IS_USER_UPDATED_INTERVENTIONS BOOLEAN,STAGE_STATUS_ID VARCHAR(100),ORIGINAL_SOURCE_CODE VARCHAR, ORIGINAL_SOURCE_NAME VARCHAR);";  
		var table2_command = snowflake.createStatement({sqlText:table2});
		var table2_creation = table2_command.execute();

		var table3 = "CREATE TABLE IF NOT EXISTS "+ DB_NAME+"."+ SCHEMA_NAME +".CL_LOAD_AUTOHUB2_DETAILS(CL_LOAD_ID NUMERIC identity(1,1),ACTIVITY_ID VARCHAR,TENANTID VARCHAR(255),PREBUILTWORKFLOWID VARCHAR,PROCESS_ID VARCHAR(255),PROCESS_RUN_ID VARCHAR(255),TRANSACTION_ID VARCHAR(255),UIPATH_STARTED_AT TIMESTAMP_TZ,UIPATH_COMPLETED_AT TIMESTAMP_TZ,UIPATH_BOT VARCHAR(255),MW_STARTED_AT TIMESTAMP_TZ,MW_COMPLETED_AT TIMESTAMP_TZ,MW_NAME VARCHAR(255),TRANSACTION_STATUS VARCHAR(255),FB_STATUS VARCHAR(255),TRANSACTION_STATUS_ID VARCHAR(255),STAGE_ID VARCHAR(255),STAGE_NAME VARCHAR(255),STAGE_ORDER NUMBER,STAGE_STATUS VARCHAR,FB_ID VARCHAR(255),FUNCTIONAL_BLOCK VARCHAR(255),START_DATE_TIME TIMESTAMP_TZ,END_DATE_TIME TIMESTAMP_TZ,TRANSACTIONSTART TIMESTAMP_TZ,TRANSACTIONEND TIMESTAMP_TZ,TRANSACTIONPRIORITYFLAG CHAR(2),ATTRIBUTES_INPUT_JSON VARIANT,ATTRIBUTES_OUTPUT_JSON VARIANT,IS_FINAL_EVENT BOOLEAN,TRANS_LATEST_FLAG CHAR(2),UPDATED_BY VARCHAR,UPDATED_AT TIMESTAMP_TZ,IS_USER_UPDATED_INTERVENTIONS BOOLEAN,STAGE_STATUS_ID VARCHAR(100),ORIGINAL_SOURCE_CODE VARCHAR, ORIGINAL_SOURCE_NAME VARCHAR);";  
		var table3_command = snowflake.createStatement({sqlText:table3});
		var table3_creation = table3_command.execute();

		var table4 = "CREATE TABLE IF NOT EXISTS "+ DB_NAME+"."+ SCHEMA_NAME +".TRANSACTIONS_FACT_DETAILS(TRANS_LOAD_ID NUMERIC identity(1,1),ACTIVITY_ID VARCHAR,TENANTID VARCHAR(255),PROCESS_ID VARCHAR(255),PROCESS_RUN_ID VARCHAR(255),TRANSACTION_ID VARCHAR(255),TRANSACTION_STATUS_ID VARCHAR(255),STAGE_ID VARCHAR(255),FB_ID VARCHAR(255),START_DATE_TIME TIMESTAMP_TZ,END_DATE_TIME TIMESTAMP_TZ,TRANSACTIONSTART TIMESTAMP_TZ,TRANSACTIONEND TIMESTAMP_TZ,TRANSACTIONPRIORITYFLAG CHAR(2),ATTRIBUTES_INPUT_JSON VARIANT,ATTRIBUTES_OUTPUT_JSON VARIANT,IS_FINAL_EVENT BOOLEAN,TRANS_LATEST_FLAG CHAR(2),UPDATED_BY VARCHAR,UPDATED_AT TIMESTAMP_TZ,STAGE_STATUS_ID VARCHAR(100),ORIGINAL_SOURCE_CODE VARCHAR, ORIGINAL_SOURCE_NAME VARCHAR);";  
		var table4_command = snowflake.createStatement({sqlText:table4});
		var table4_creation = table4_command.execute();

		
		var table6 = "CREATE OR REPLACE TEMPORARY TABLE "+ DB_NAME+"."+ SCHEMA_NAME +".TEMP_INTERVENTIONS_DETAILS(INTERVENTIONS_ID VARCHAR,ACTIVITY_ID VARCHAR,PROCESS_ID VARCHAR(255),PROCESS_RUN_ID VARCHAR(255),ERROR_CODE VARCHAR,KEY VARCHAR,VALUE VARCHAR,REASON VARCHAR,RECEIVED_TIMESTAMP TIMESTAMP_TZ,SRC_UPDATED_AT TIMESTAMP_TZ,SRC_UPDATED_BY VARCHAR,TRANSACTION_ID VARCHAR(255),STAGE_ID VARCHAR(255),FB_ID VARCHAR(255),UPDATED_AT TIMESTAMP_TZ,UPDATED_BY VARCHAR,INTERVENTION_STATUS VARCHAR(100),LATEST_INTERVENTION_FLAG CHAR(2),REQUIRED_ACTIONS VARIANT,ATTRIBUTES_INPUT_JSON VARIANT);"; 
		var table6_command = snowflake.createStatement({sqlText:table6});
		var table6_creation = table6_command.execute();
		
		var table5 = "CREATE TABLE IF NOT EXISTS "+ DB_NAME+"."+ SCHEMA_NAME +".INTERVENTIONS_DETAILS(INTERVENTION_RUN_ID VARCHAR,INTERVENTIONS_ID VARCHAR,ACTIVITY_ID VARCHAR,PROCESS_ID VARCHAR(255),PROCESS_RUN_ID VARCHAR(255),ERROR_CODE VARCHAR,KEY VARCHAR,VALUE VARCHAR,REASON VARCHAR,RECEIVED_TIMESTAMP TIMESTAMP_TZ,SRC_UPDATED_AT TIMESTAMP_TZ,SRC_UPDATED_BY VARCHAR,TRANSACTION_ID VARCHAR(255),STAGE_ID VARCHAR(255),FB_ID VARCHAR(255),UPDATED_AT TIMESTAMP_TZ,UPDATED_BY VARCHAR,INTERVENTION_STATUS VARCHAR(100),LATEST_INTERVENTION_FLAG CHAR(2),REQUIRED_ACTIONS VARIANT,ATTRIBUTES_INPUT_JSON VARIANT);"; 
		var table5_command = snowflake.createStatement({sqlText:table5});
		var table5_creation = table5_command.execute();
        
        var table7 = "CREATE STREAM IF NOT EXISTS "+ DB_NAME+"."+ SCHEMA_NAME +".ANALYTICAL_LAYER_STREAM on table "+ DB_NAME+"."+ SCHEMA_NAME +".TRANSACTIONS_FACT_DETAILS  APPEND_ONLY = TRUE; ";
        var table7_command = snowflake.createStatement({sqlText:table7});
		var table7_creation = table7_command.execute();
		
		

	}
	catch(err)
	{
		snowflake.execute ({sqlText: `ROLLBACK`});
		Err_Msg = `Err_20 : Table Creation failed`;
		
		//Inserting Error Table
		
        snowflake.execute( { sqlText:`UPDATE "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_CONTROL_TABLE" set status='Failed',
		end_time = current_timestamp(),TENANT_NAME = '`+SCHEMA_NAME+`'
        where FILE_NAME='`+SF_NAME+`' and end_time is null`});
        
		snowflake.execute({ sqlText: `insert into "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_ERROR_TABLE"(ERROR_CODE,ERROR_STATE,
        ERROR_MESSAGE,ERROR_LINE,Stored_Procedure_Name,TENANT_NAME,FILE_NAME,CUSTOM_ERR_CODE,DB_NAME,CUSTOM_ERR_MESSAGE) 
        VALUES (?,?,?,?,?,?,?,?,?,?)`,binds: [err.code, err.state, err.message, err.stackTraceTxt,
        UPDATED_BY,SCHEMA_NAME,SF_NAME,'Err_20',DB_NAME,Err_Msg]});
		
		snowflake.execute({ sqlText:`select ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTO_HUB_2_0_ALERT_EXTERNAL_FUNCTION (object_construct(*)) FROM ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM;`});
  
        snowflake.execute({ sqlText:`Insert into ELEMENT5_DB.ELEMENT5_DB_SCHEMA.JUNK_STREAM_TABLE select $1 from ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM where false; `});

        return Err_Msg;
	}
    
    //Transaction Begins 
    
    snowflake.execute ({sqlText: `BEGIN TRANSACTION`}); 

	try{
		//Staging Data into Target Table

		snowflake.execute({sqlText: `COPY INTO `+ DB_NAME+`.`+SCHEMA_NAME+`.AUTOHUB_JSON_RAW_LAYER (AUTOHUB_JSON_DATA_RAW)
		FROM (SELECT $1 AS AUTOHUB_JSON_DATA_RAW FROM @ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTO_HUB_PROD02_STAGE/`+ SF_NAME +`)
		FILE_FORMAT = (type = json);`
		});
		 
		snowflake.execute ({sqlText: `COMMIT`}); 
		 
			
	 }
	catch(err){
    
		snowflake.execute ({sqlText: `ROLLBACK`});
        Err_Msg =`Err_30 : Failed to Copy data From Stage.`;
			
		//Inserting Error Table
			
		snowflake.execute( { sqlText:`UPDATE "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_CONTROL_TABLE" set status='Failed',end_time = current_timestamp(),TENANT_NAME = '`+SCHEMA_NAME+`'
        where FILE_NAME='`+SF_NAME+`' and end_time is null`});
        
		snowflake.execute({ sqlText: `insert into "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_ERROR_TABLE"(ERROR_CODE,ERROR_STATE,
        ERROR_MESSAGE,ERROR_LINE,Stored_Procedure_Name,TENANT_NAME,FILE_NAME,CUSTOM_ERR_CODE,DB_NAME,CUSTOM_ERR_MESSAGE) 
        VALUES (?,?,?,?,?,?,?,?,?,?)`,binds: [err.code, err.state, err.message, err.stackTraceTxt,
        UPDATED_BY,SCHEMA_NAME,SF_NAME,'Err_30',DB_NAME,Err_Msg]});
		
		snowflake.execute({ sqlText:`select ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTO_HUB_2_0_ALERT_EXTERNAL_FUNCTION (object_construct(*)) FROM ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM;`});
  
        snowflake.execute({ sqlText:`Insert into ELEMENT5_DB.ELEMENT5_DB_SCHEMA.JUNK_STREAM_TABLE select $1 from ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM where false;`});
		
		 snowflake.execute({ sqlText:`Insert into ELEMENT5_DB.ELEMENT5_DB_SCHEMA.JUNK_STREAM_TABLE select $1 from `+ DB_NAME+`.`+SCHEMA_NAME+`."AUTOHUB_JSON_RAW_LAYER_STREAM" where false;`});

        return Err_Msg;
	}

	try{
		//Loading Temporary table
		
		snowflake.execute({sqlText: `INSERT INTO `+ DB_NAME+`.`+SCHEMA_NAME+`."CL_LOAD_TEMPORARY"(ACTIVITY_ID,TENANTID,PREBUILTWORKFLOWID,PROCESS_ID,
		PROCESS_RUN_ID,UIPATH_STARTED_AT,UIPATH_COMPLETED_AT,UIPATH_BOT,MW_STARTED_AT,MW_COMPLETED_AT,MW_NAME,TRANSACTION_STATUS,
		STAGE_NAME,FUNCTIONAL_BLOCK,START_DATE_TIME,END_DATE_TIME,ATTRIBUTES_INPUT_JSON,
		ATTRIBUTES_OUTPUT_JSON,IS_FINAL_EVENT,TRANS_LATEST_FLAG,STAGE_ID,TRANSACTIONSTART,
		TRANSACTIONEND,TRANSACTIONPRIORITYFLAG,STAGE_ORDER,STAGE_STATUS,TRANSACTION_STATUS_ID,UPDATED_AT,TRANSACTION_ID,
		UPDATED_BY,IS_USER_UPDATED_INTERVENTIONS,STAGE_STATUS_ID,FB_ID,ORIGINAL_SOURCE_CODE,ORIGINAL_SOURCE_NAME)
		SELECT AUTOHUB_JSON_DATA_RAW:activityId::String AS ACTIVITY_ID,AUTOHUB_JSON_DATA_RAW:tenantId::String AS TENANTID,
		AUTOHUB_JSON_DATA_RAW:preBuiltWorkflowId AS PREBUILTWORKFLOWID,AUTOHUB_JSON_DATA_RAW:processId::String AS PROCESS_ID,
		AUTOHUB_JSON_DATA_RAW:processRunId::STRING AS PROCESS_RUN_ID,
		AUTOHUB_JSON_DATA_RAW:from.uipath:startedAt AS UIPATH_STARTED_AT,
		AUTOHUB_JSON_DATA_RAW:from.uipath:completedAt AS UIPATH_COMPLETED_AT,
		AUTOHUB_JSON_DATA_RAW:from.uipath:botName::STRING  AS UIPATH_BOT,
		AUTOHUB_JSON_DATA_RAW:from.microworker:startedAt AS MW_STARTED_AT,
		AUTOHUB_JSON_DATA_RAW:from.microworker:completedAt AS MW_COMPLETED_AT,
		AUTOHUB_JSON_DATA_RAW:from.microworker:podName::String AS MW_NAME,
		AUTOHUB_JSON_DATA_RAW:status::String AS TRANSACTION_STATUS,
		AUTOHUB_JSON_DATA_RAW:stageName::String AS STAGE_NAME,
		AUTOHUB_JSON_DATA_RAW:functionalBlock::String AS FUNCTIONAL_BLOCK,AUTOHUB_JSON_DATA_RAW:when AS START_DATE_TIME,
		AUTOHUB_JSON_DATA_RAW:end AS END_DATE_TIME,
		PARSE_JSON(AUTOHUB_JSON_DATA_RAW:payload.input.meta)::VARIANT AS ATTRIBUTES_INPUT_JSON,
		PARSE_JSON(AUTOHUB_JSON_DATA_RAW:payload.output.meta)::VARIANT AS ATTRIBUTES_OUTPUT_JSON,
		AUTOHUB_JSON_DATA_RAW:isFinalEvent::boolean AS IS_FINAL_EVENT,'N',
		AUTOHUB_JSON_DATA_RAW:stageId::String AS STAGE_ID,
		AUTOHUB_JSON_DATA_RAW:transactionStart::String AS TRANSACTIONSTART,
		AUTOHUB_JSON_DATA_RAW:transactionEnd::String AS TRANSACTIONEND,
		AUTOHUB_JSON_DATA_RAW:transactionPriorityFlag::String AS TRANSACTIONPRIORITYFLAG,
		AUTOHUB_JSON_DATA_RAW:stageOrder::NUMBER AS STAGE_ORDER,
		AUTOHUB_JSON_DATA_RAW:stageStatus::String AS STAGE_STATUS,
		AUTOHUB_JSON_DATA_RAW:transactionStatusId::String AS TRANSACTION_STATUS_ID, current_timestamp() AS UPDATED_AT,
		AUTOHUB_JSON_DATA_RAW:transactionId::String AS TRANSACTION_ID,
		'`+UPDATED_BY+`',AUTOHUB_JSON_DATA_RAW:isUserUpdatedInterventions::boolean AS IS_USER_UPDATED_INTERVENTIONS,
		AUTOHUB_JSON_DATA_RAW:stageStatusId::String AS STAGE_STATUS_ID,AUTOHUB_JSON_DATA_RAW:functionalBlockId::String as FB_ID,
		AUTOHUB_JSON_DATA_RAW:originalSourceCode::String as ORIGINAL_SOURCE_CODE,
        AUTOHUB_JSON_DATA_RAW:originalSourceName::String as ORIGINAL_SOURCE_NAME
		FROM `+ DB_NAME+`.`+SCHEMA_NAME+`."AUTOHUB_JSON_RAW_LAYER_STREAM" WHERE METADATA$ACTION ='INSERT'
        AND METADATA$ISUPDATE='FALSE';`
		});
		
		
		snowflake.execute({sqlText: `UPDATE `+ DB_NAME+`.`+SCHEMA_NAME+`."CL_LOAD_TEMPORARY" SET TRANS_LATEST_FLAG ='Y' WHERE 
		(TRANSACTION_ID,START_DATE_TIME) IN (
		SELECT TRANSACTION_ID, MAX(START_DATE_TIME) AS START_DATE_TIME FROM `+ DB_NAME+`.`+SCHEMA_NAME+`."CL_LOAD_TEMPORARY"  
		group by TRANSACTION_ID);`
		});
		
        
       //Validation Check Transaction/Intervention Id Should Not be Null
       
        var my_sql_command6 = snowflake.execute({sqlText: `SELECT  count(*) FROM  
         `+ DB_NAME+`.`+SCHEMA_NAME+`."CL_LOAD_TEMPORARY",table(flatten(ATTRIBUTES_INPUT_JSON:reason)) f  
         where (lower(TRANSACTION_ID) is  null 
         or lower(TRANSACTION_ID)='null' 
         or TRANSACTION_ID ='' or f.value:id ='' or lower(f.value:id) is null or lower(f.value:id)='null') ;`
		 });
		
		my_sql_command6.next();
       	
		if ((my_sql_command6.getColumnValue(1)) >= 1 )
        {
            Err_Msg ="Err_130: Transaction/Intervention Id should not be null";
            
        snowflake.execute({ sqlText:`UPDATE "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_CONTROL_TABLE" set status='Failed',
		end_time = current_timestamp(),TENANT_NAME = '`+SCHEMA_NAME+`'
        where FILE_NAME='`+SF_NAME+`' and end_time is null`});
        
        snowflake.execute({ sqlText: `insert into "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_ERROR_TABLE"(ERROR_CODE,ERROR_STATE,
        ERROR_MESSAGE,ERROR_LINE,Stored_Procedure_Name,TENANT_NAME,FILE_NAME,CUSTOM_ERR_CODE,DB_NAME,CUSTOM_ERR_MESSAGE) 
        VALUES (?,?,?,?,?,?,?,?,?,?)`,binds: ['Err_130', '200', Err_Msg, '',
        UPDATED_BY,SCHEMA_NAME,SF_NAME,'Err_130',DB_NAME,Err_Msg]});
        
        
		
		snowflake.execute({ sqlText:`select ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTO_HUB_2_0_ALERT_EXTERNAL_FUNCTION (object_construct(*)) FROM ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM;`});
  
        snowflake.execute({ sqlText:`Insert into ELEMENT5_DB.ELEMENT5_DB_SCHEMA.JUNK_STREAM_TABLE select $1 from ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM where false; `});
		
		snowflake.execute({ sqlText:`Insert into ELEMENT5_DB.ELEMENT5_DB_SCHEMA.JUNK_STREAM_TABLE select $1 from `+ DB_NAME+`.`+SCHEMA_NAME+`."AUTOHUB_JSON_RAW_LAYER_STREAM" where false;`});
        
        return Err_Msg;
        }
	}
	catch(err){
		snowflake.execute ({sqlText: `ROLLBACK`});
		Err_Msg = `Err_40 : Failed to Load Temporary Table.`;
		
		//Inserting Error Table
		
		snowflake.execute( { sqlText:`UPDATE "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_CONTROL_TABLE" set status='Failed',end_time = current_timestamp(),TENANT_NAME = '`+SCHEMA_NAME+`'
        where FILE_NAME='`+SF_NAME+`' and end_time is null`});
        
		snowflake.execute({ sqlText: `insert into "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_ERROR_TABLE"(ERROR_CODE,ERROR_STATE,
        ERROR_MESSAGE,ERROR_LINE,Stored_Procedure_Name,TENANT_NAME,FILE_NAME,CUSTOM_ERR_CODE,DB_NAME,CUSTOM_ERR_MESSAGE) 
        VALUES (?,?,?,?,?,?,?,?,?,?)`,binds: [err.code, err.state, err.message, err.stackTraceTxt,
        UPDATED_BY,SCHEMA_NAME,SF_NAME,'Err_40',DB_NAME,Err_Msg]});
		
		snowflake.execute({ sqlText:`select ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTO_HUB_2_0_ALERT_EXTERNAL_FUNCTION (object_construct(*)) FROM ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM;`});
  
        snowflake.execute({ sqlText:`Insert into ELEMENT5_DB.ELEMENT5_DB_SCHEMA.JUNK_STREAM_TABLE select $1 from ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM where false; `});
        
		snowflake.execute({ sqlText:`Insert into ELEMENT5_DB.ELEMENT5_DB_SCHEMA.JUNK_STREAM_TABLE select $1 from `+ DB_NAME+`.`+SCHEMA_NAME+`.AUTOHUB_JSON_RAW_LAYER_STREAM where false; `});

        return Err_Msg;
	}
	try{
		//Setting Latest Flag

		snowflake.execute ({sqlText: `UPDATE `+ DB_NAME+`.`+SCHEMA_NAME+`."CL_LOAD_AUTOHUB2_DETAILS" SET TRANS_LATEST_FLAG ='N' WHERE 
		TRANSACTION_ID IN(SELECT DISTINCT TRANSACTION_ID FROM `+ DB_NAME+`.`+SCHEMA_NAME+`."CL_LOAD_TEMPORARY") AND TRANS_LATEST_FLAG ='Y'`
		}); 
		
		//Loading Data Lake Table

		snowflake.execute({sqlText: `INSERT INTO `+ DB_NAME+`.`+SCHEMA_NAME+`.CL_LOAD_AUTOHUB2_DETAILS(ACTIVITY_ID,TENANTID,PREBUILTWORKFLOWID,PROCESS_ID,
		PROCESS_RUN_ID,UIPATH_STARTED_AT,UIPATH_COMPLETED_AT,UIPATH_BOT,MW_STARTED_AT,MW_COMPLETED_AT,MW_NAME,TRANSACTION_STATUS,
		FB_STATUS,STAGE_NAME,FUNCTIONAL_BLOCK,START_DATE_TIME,END_DATE_TIME,ATTRIBUTES_INPUT_JSON,
		ATTRIBUTES_OUTPUT_JSON,IS_FINAL_EVENT,TRANS_LATEST_FLAG,TRANSACTION_ID,STAGE_ID,TRANSACTIONSTART,
		TRANSACTIONEND,TRANSACTIONPRIORITYFLAG,STAGE_ORDER,STAGE_STATUS,TRANSACTION_STATUS_ID,
		UPDATED_AT,UPDATED_BY,IS_USER_UPDATED_INTERVENTIONS,STAGE_STATUS_ID,FB_ID,ORIGINAL_SOURCE_CODE,ORIGINAL_SOURCE_NAME)
		SELECT ACTIVITY_ID,TENANTID,PREBUILTWORKFLOWID,PROCESS_ID,
		PROCESS_RUN_ID,convert_timezone( 'UTC', UIPATH_STARTED_AT) AS UIPATH_STARTED_AT,convert_timezone( 'UTC', UIPATH_COMPLETED_AT) AS UIPATH_COMPLETED_AT,
		UIPATH_BOT,convert_timezone( 'UTC', MW_STARTED_AT) AS MW_STARTED_AT,convert_timezone( 'UTC', MW_COMPLETED_AT) AS MW_COMPLETED_AT,MW_NAME,TRANSACTION_STATUS,
		ATTRIBUTES_OUTPUT_JSON:status::STRING AS FB_STATUS,STAGE_NAME,FUNCTIONAL_BLOCK,
		IFF(START_DATE_TIME = '',NULL,convert_timezone( 'UTC', START_DATE_TIME)) START_DATE_TIME,
		IFF(END_DATE_TIME = '',NULL,convert_timezone( 'UTC', END_DATE_TIME)) END_DATE_TIME,ATTRIBUTES_INPUT_JSON,
		ATTRIBUTES_OUTPUT_JSON,IS_FINAL_EVENT,TRANS_LATEST_FLAG,TRANSACTION_ID,
		STAGE_ID,IFF(TRANSACTIONSTART = '',NULL,convert_timezone( 'UTC', TRANSACTIONSTART)) TRANSACTIONSTART,
		IFF(TRANSACTIONEND = '',NULL,convert_timezone( 'UTC', TRANSACTIONEND)) TRANSACTIONEND,TRANSACTIONPRIORITYFLAG,STAGE_ORDER,STAGE_STATUS,TRANSACTION_STATUS_ID, 
        convert_timezone('UTC',current_timestamp()) AS UPDATED_AT,
		UPDATED_BY,IS_USER_UPDATED_INTERVENTIONS,STAGE_STATUS_ID,FB_ID,ORIGINAL_SOURCE_CODE,ORIGINAL_SOURCE_NAME
		FROM `+ DB_NAME +`.`+ SCHEMA_NAME +`."CL_LOAD_TEMPORARY" `});
	}

	
	catch(err){
		snowflake.execute ({sqlText: `ROLLBACK`});
		Err_Msg =  `Err_50 : Failed to Load Canonical Table.`;
		
		//Inserting Error Table
		
		snowflake.execute( { sqlText:`UPDATE "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_CONTROL_TABLE" set status='Failed',end_time = current_timestamp(),TENANT_NAME = '`+SCHEMA_NAME+`'
        where FILE_NAME='`+SF_NAME+`' and end_time is null`});
        
		snowflake.execute({ sqlText: `insert into "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_ERROR_TABLE"(ERROR_CODE,ERROR_STATE,
        ERROR_MESSAGE,ERROR_LINE,Stored_Procedure_Name,TENANT_NAME,FILE_NAME,CUSTOM_ERR_CODE,DB_NAME,CUSTOM_ERR_MESSAGE) 
        VALUES (?,?,?,?,?,?,?,?,?,?)`,binds: [err.code, err.state, err.message, err.stackTraceTxt,
        UPDATED_BY,SCHEMA_NAME,SF_NAME,'Err_50',DB_NAME,Err_Msg]});
		
		snowflake.execute({ sqlText:`select ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTO_HUB_2_0_ALERT_EXTERNAL_FUNCTION (object_construct(*)) FROM ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM;`});
  
        snowflake.execute({ sqlText:`Insert into ELEMENT5_DB.ELEMENT5_DB_SCHEMA.JUNK_STREAM_TABLE select $1 from ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM where false; `});
        
        return Err_Msg;
	}
	try{


		//Loading Business Layer
        
        snowflake.execute ({sqlText: `UPDATE `+ DB_NAME+`.`+SCHEMA_NAME+`."TRANSACTIONS_FACT_DETAILS" SET TRANS_LATEST_FLAG ='N' WHERE 
		TRANSACTION_ID IN(SELECT DISTINCT TRANSACTION_ID FROM `+ DB_NAME+`.`+SCHEMA_NAME+`."CL_LOAD_TEMPORARY") AND TRANS_LATEST_FLAG ='Y'`
		}); 

		snowflake.execute({sqlText: `INSERT INTO `+ DB_NAME+`.`+SCHEMA_NAME+`."TRANSACTIONS_FACT_DETAILS"(ACTIVITY_ID,TENANTID,PROCESS_ID,
		PROCESS_RUN_ID,START_DATE_TIME,END_DATE_TIME,ATTRIBUTES_INPUT_JSON,
		ATTRIBUTES_OUTPUT_JSON,IS_FINAL_EVENT,TRANS_LATEST_FLAG,TRANSACTION_ID,STAGE_ID,TRANSACTIONSTART,
		TRANSACTIONEND,TRANSACTIONPRIORITYFLAG,TRANSACTION_STATUS_ID,
		UPDATED_AT,UPDATED_BY,STAGE_STATUS_ID,FB_ID,ORIGINAL_SOURCE_CODE,ORIGINAL_SOURCE_NAME)
		SELECT ACTIVITY_ID,TENANTID,PROCESS_ID,PROCESS_RUN_ID,
		convert_timezone('UTC', IFF(START_DATE_TIME = '',NULL,START_DATE_TIME)) START_DATE_TIME,
		convert_timezone( 'UTC', IFF(END_DATE_TIME = '',NULL,END_DATE_TIME)) END_DATE_TIME,
        ATTRIBUTES_INPUT_JSON,	ATTRIBUTES_OUTPUT_JSON,IS_FINAL_EVENT,TRANS_LATEST_FLAG,TRANSACTION_ID,
		STAGE_ID,convert_timezone('UTC',IFF(TRANSACTIONSTART = '',NULL,TRANSACTIONSTART)) TRANSACTIONSTART,
		convert_timezone( 'UTC',IFF(TRANSACTIONEND = '',NULL, TRANSACTIONEND)) TRANSACTIONEND,TRANSACTIONPRIORITYFLAG,
		TRANSACTION_STATUS_ID,convert_timezone('UTC',current_timestamp()) AS UPDATED_AT,
		UPDATED_BY,STAGE_STATUS_ID,FB_ID,ORIGINAL_SOURCE_CODE,ORIGINAL_SOURCE_NAME
		FROM `+ DB_NAME+`.`+SCHEMA_NAME+`."CL_LOAD_TEMPORARY"  WHERE IS_USER_UPDATED_INTERVENTIONS IS NULL`});
	}
	catch(err){
		snowflake.execute ({sqlText: `ROLLBACK`});
		Err_Msg =  `Err_60 : Failed to Load Transaction Fact Table in Business Layer. `;
		
		//Inserting Error Table
		
		snowflake.execute( { sqlText:`UPDATE "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_CONTROL_TABLE" set status='Failed',end_time = current_timestamp(),TENANT_NAME = '`+SCHEMA_NAME+`'
        where FILE_NAME='`+SF_NAME+`' and end_time is null`});
		
		snowflake.execute({ sqlText: `insert into "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_ERROR_TABLE"(ERROR_CODE,ERROR_STATE,
        ERROR_MESSAGE,ERROR_LINE,Stored_Procedure_Name,TENANT_NAME,FILE_NAME,CUSTOM_ERR_CODE,DB_NAME,CUSTOM_ERR_MESSAGE) 
        VALUES (?,?,?,?,?,?,?,?,?,?)`,binds: [err.code, err.state, err.message, err.stackTraceTxt,
        UPDATED_BY,SCHEMA_NAME,SF_NAME,'Err_60',DB_NAME,Err_Msg]});
		
		snowflake.execute({ sqlText:`select ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTO_HUB_2_0_ALERT_EXTERNAL_FUNCTION (object_construct(*)) FROM ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM;`});
  
        snowflake.execute({ sqlText:`Insert into ELEMENT5_DB.ELEMENT5_DB_SCHEMA.JUNK_STREAM_TABLE select $1 from ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM where false; `});
        
        return Err_Msg;
	}
	try{
        

		snowflake.execute({sqlText: `INSERT INTO `+ DB_NAME+`.`+SCHEMA_NAME+`."TEMP_INTERVENTIONS_DETAILS"(INTERVENTIONS_ID,ERROR_CODE,
		KEY,VALUE,REASON,RECEIVED_TIMESTAMP,SRC_UPDATED_AT,SRC_UPDATED_BY,
		TRANSACTION_ID,STAGE_ID,UPDATED_AT,UPDATED_BY,INTERVENTION_STATUS,LATEST_INTERVENTION_FLAG,REQUIRED_ACTIONS,FB_ID,
		ACTIVITY_ID,PROCESS_ID,PROCESS_RUN_ID,ATTRIBUTES_INPUT_JSON)
		SELECT f.value:id::String AS INTERVENTIONS_ID,f.value:error_code::String AS ERROR_CODE,
		f.value:key::String AS KEY,f.value:value::String AS VALUE,f.value:reason::String AS REASON,
		convert_timezone( 'UTC',IFF(f.value:timestamp = '',NULL, f.value:timestamp)) RECEIVED_TIMESTAMP,
		IFF(f.value:updatedAt = '',NULL, f.value:updatedAt) SRC_UPDATED_AT,
		f.value:updatedBy::String AS SRC_UPDATED_BY,TRANSACTION_ID,STAGE_ID,
        convert_timezone('UTC',current_timestamp()) AS UPDATED_AT,
		UPDATED_BY,'OPEN','N',f.value:requiredActions::VARIANT AS REQUIRED_ACTIONS,FB_ID,
		ACTIVITY_ID,PROCESS_ID,PROCESS_RUN_ID,ATTRIBUTES_INPUT_JSON
		FROM  `+ DB_NAME+`.`+SCHEMA_NAME+`."CL_LOAD_TEMPORARY",table(flatten(ATTRIBUTES_OUTPUT_JSON:reason)) f 
		WHERE IS_USER_UPDATED_INTERVENTIONS IS NULL AND STAGE_STATUS_ID ='status_003';`
		}); 
		
		snowflake.execute({sqlText: `UPDATE `+ DB_NAME+`.`+SCHEMA_NAME+`."TEMP_INTERVENTIONS_DETAILS" 
        SET LATEST_INTERVENTION_FLAG ='Y' WHERE 
		(TRANSACTION_ID,INTERVENTIONS_ID,RECEIVED_TIMESTAMP) IN (
		SELECT TRANSACTION_ID,INTERVENTIONS_ID, MAX(RECEIVED_TIMESTAMP) AS RECEIVED_TIMESTAMP
        FROM `+ DB_NAME+`.`+SCHEMA_NAME+`."TEMP_INTERVENTIONS_DETAILS"  
		group by TRANSACTION_ID,INTERVENTIONS_ID);`
		});
        
        snowflake.execute ({sqlText: `UPDATE `+ DB_NAME+`.`+SCHEMA_NAME+`."TEMP_INTERVENTIONS_DETAILS" SET LATEST_INTERVENTION_FLAG ='N' WHERE 
		(TRANSACTION_ID,INTERVENTIONS_ID) IN(SELECT DISTINCT TRANSACTION_ID,INTERVENTIONS_ID  
		 FROM `+ DB_NAME+`.`+SCHEMA_NAME+`."INTERVENTIONS_DETAILS" WHERE LATEST_INTERVENTION_FLAG ='Y' AND INTERVENTION_STATUS ='OPEN')
         AND LATEST_INTERVENTION_FLAG='Y'`
		}); 
		
		
		snowflake.execute({sqlText: `INSERT INTO `+ DB_NAME+`.`+SCHEMA_NAME+`."INTERVENTIONS_DETAILS"(INTERVENTION_RUN_ID,
		INTERVENTIONS_ID,ERROR_CODE,KEY,VALUE,REASON,RECEIVED_TIMESTAMP,SRC_UPDATED_AT,SRC_UPDATED_BY,
		TRANSACTION_ID,STAGE_ID,UPDATED_AT,UPDATED_BY,INTERVENTION_STATUS,LATEST_INTERVENTION_FLAG,REQUIRED_ACTIONS,FB_ID,
		ACTIVITY_ID,PROCESS_ID,PROCESS_RUN_ID,ATTRIBUTES_INPUT_JSON)
		SELECT uuid_string() AS INTERVENTION_RUN_ID,INTERVENTIONS_ID,ERROR_CODE,
		KEY,VALUE,REASON,RECEIVED_TIMESTAMP,SRC_UPDATED_AT,SRC_UPDATED_BY,
		TRANSACTION_ID,STAGE_ID,UPDATED_AT,UPDATED_BY,INTERVENTION_STATUS,LATEST_INTERVENTION_FLAG,REQUIRED_ACTIONS,FB_ID,
		ACTIVITY_ID,PROCESS_ID,PROCESS_RUN_ID,ATTRIBUTES_INPUT_JSON FROM  `+ DB_NAME+`.`+SCHEMA_NAME+`."TEMP_INTERVENTIONS_DETAILS";`
		}); 
		
		
		
	}
	catch(err){
		snowflake.execute ({sqlText: `ROLLBACK`});
		Err_Msg = `Err_70 : Failed to Load Intervention Table. `;
		
		//Inserting Error Table
		
		snowflake.execute( { sqlText:`UPDATE "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_CONTROL_TABLE" set status='Failed',end_time = current_timestamp(),TENANT_NAME = '`+SCHEMA_NAME+`'
        where FILE_NAME='`+SF_NAME+`' and end_time is null`});
		
		snowflake.execute({ sqlText: `insert into "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_ERROR_TABLE"(ERROR_CODE,ERROR_STATE,
        ERROR_MESSAGE,ERROR_LINE,Stored_Procedure_Name,TENANT_NAME,FILE_NAME,CUSTOM_ERR_CODE,DB_NAME,CUSTOM_ERR_MESSAGE) 
        VALUES (?,?,?,?,?,?,?,?,?,?)`,binds: [err.code, err.state, err.message, err.stackTraceTxt,
        UPDATED_BY,SCHEMA_NAME,SF_NAME,'Err_70',DB_NAME,Err_Msg]});
		
		snowflake.execute({ sqlText:`select ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTO_HUB_2_0_ALERT_EXTERNAL_FUNCTION (object_construct(*)) FROM ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM;`});
  
        snowflake.execute({ sqlText:`Insert into ELEMENT5_DB.ELEMENT5_DB_SCHEMA.JUNK_STREAM_TABLE select $1 from ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM where false; `});
        
        return Err_Msg;
	}

	
    var sql_command = snowflake.execute( { sqlText: `SELECT COUNT(*) AS COUNT FROM `+ DB_NAME+`.`+SCHEMA_NAME+`.CL_LOAD_TEMPORARY` });
    sql_command.next();
    var col_update = sql_command.getColumnValue(1);   


    snowflake.execute({ sqlText:`UPDATE "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_CONTROL_TABLE" set COUNT_OF_RECORDS='`+col_update+`',
	Tenant_name='`+SCHEMA_NAME+`',status='Succeeded',end_time=current_timestamp() where FILE_NAME='`+SF_NAME+`' and end_time is null`});
    
    
	snowflake.execute ({sqlText: `COMMIT`});

	return 'DATA_LOADED_SUCCESSFULLY.';  

}
catch(err)
{
  snowflake.execute ({sqlText: `ROLLBACK`});
  
  Err_Msg = `Err_80 :  AUTOHUB_TRANSCATIONAL_REPORT_LOAD Generic Failure `;
  
  //Inserting Error Table
  
		snowflake.execute( { sqlText:`UPDATE "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_CONTROL_TABLE" set status='Failed',
		end_time = current_timestamp(),TENANT_NAME = '`+SCHEMA_NAME+`'
        where FILE_NAME='`+SF_NAME+`' and end_time is null`});
		
		snowflake.execute({ sqlText: `insert into "ELEMENT5_DB"."ELEMENT5_DB_SCHEMA"."AUTOHUB_AUDIT_ERROR_TABLE"(ERROR_CODE,ERROR_STATE,
        ERROR_MESSAGE,ERROR_LINE,Stored_Procedure_Name,TENANT_NAME,FILE_NAME,CUSTOM_ERR_CODE,DB_NAME,CUSTOM_ERR_MESSAGE) 
        VALUES (?,?,?,?,?,?,?,?,?,?)`,binds: [err.code, err.state, err.message, err.stackTraceTxt,
        UPDATED_BY,SCHEMA_NAME,SF_NAME,'Err_80',DB_NAME,Err_Msg]});
		
		snowflake.execute({ sqlText:`select ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTO_HUB_2_0_ALERT_EXTERNAL_FUNCTION (object_construct(*)) FROM ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM;`});
  
        snowflake.execute({ sqlText:`Insert into ELEMENT5_DB.ELEMENT5_DB_SCHEMA.JUNK_STREAM_TABLE select $1 from ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_AUDIT_ERROR_TABLE_STREAM where false; `});
        
        return Err_Msg;
}
$$;

grant usage on procedure ELEMENT5_DB.ELEMENT5_DB_SCHEMA.AUTOHUB_TRANSACTIONAL_REPORT_LOAD(VARCHAR,VARCHAR,VARCHAR) 
TO ROLE SF_PROD_USER; 

